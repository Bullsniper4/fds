#include <iostream>
using namespace std;

class Stack
{
public:
    const static int size = 100;
    int top;
    char array[size];

    // Constructor to initialize the stack
    Stack() : top(-1) {}

    void push(char x)
    {
        if (top == size - 1)
        {
            cout << "Stack Overflow!!";
            return;
        }

        array[++top] = x;
    }

    char pop()
    {
        if (top == -1)
        {
            cout << "Stack Underflow!!";
            return -1;
        }

        return array[top--];
    }

    void display()
    {
        if (top == -1)
        {
            cout << "Stack is Empty";
            return;
        }

        cout << "Stack contains: ";
        for (int i = 0; i <= top; i++)
        {
            cout << array[i] << " ";
        }
        cout << endl;
    }

    char peek()
    {
        return array[top];
    }

    bool isEmpty()
    {
        return (top == -1);
    }
};

int main()
{
    Stack brackets;
    string s;
    cout << "Enter the parenthesis to check balancing: ";
    cin >> s;

    bool is_balanced = true;

    for (int i = 0; i < s.size(); i++)
    {
        if (s[i] == '(' || s[i] == '{' || s[i] == '[')
        {
            brackets.push(s[i]);
        }
        else if (s[i] == ')' || s[i] == '}' || s[i] == ']')
        {
            if (brackets.isEmpty())
            {
                is_balanced = false;
                break;
            }

            char last_bracket = brackets.peek();

            if ((s[i] == ')' && last_bracket == '(') ||
                (s[i] == '}' && last_bracket == '{') ||
                (s[i] == ']' && last_bracket == '['))
            {
                brackets.pop();
            }
            else
            {
                is_balanced = false;
                break;
            }
        }
    }

    if (!brackets.isEmpty())
    {
        is_balanced = false;
    }

    if (is_balanced)
        cout << s << " is balanced." << endl;
    else
        cout << s << " is not balanced." << endl;

    return 0;
}

